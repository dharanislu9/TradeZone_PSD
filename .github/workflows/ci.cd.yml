name: Full Stack CI/CD Pipeline with Docker (Frontend and Backend)

on:
  push:
    branches:
      - Features
  pull_request:
    branches:
      - Features

jobs:
  # Frontend Job
  frontend:
    runs-on: ubuntu-latest
    timeout-minutes: 20  # Set a timeout to avoid indefinite running

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js (Frontend)
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install
          npm install @babel/plugin-proposal-private-property-in-object --save-dev

      - name: Build frontend
        run: |
          cd frontend
          CI=false npm run build  # Suppresses warnings from failing the build in CI

      - name: Prepare Docker Context for Frontend
        run: |
          cd frontend
          mkdir -p docker-context
          cp -r build docker-context/
          cp Dockerfile docker-context/

  # Backend Job
  backend:
    runs-on: ubuntu-latest
    timeout-minutes: 20  # Set a timeout to avoid indefinite running

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js (Backend)
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install backend dependencies
        run: |
          cd backend
          npm install

      - name: Build backend
        run: |
          cd backend
          CI=false npm run build

      - name: Prepare Docker Context for Backend
        run: |
          cd backend
          mkdir -p docker-context
          cp -r . docker-context/
          cp Dockerfile docker-context/

  # Docker Job
  docker:
    runs-on: ubuntu-latest
    needs: [frontend, backend]  # Ensure both frontend and backend jobs complete first
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and Push Frontend Docker Image
        run: |
          cd frontend/docker-context
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/tradezone-frontend:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/tradezone-frontend:latest

      - name: Build and Push Backend Docker Image
        run: |
          cd backend/docker-context
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/tradezone-backend:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/tradezone-backend:latest
